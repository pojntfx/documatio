#!/bin/bash

# Download URL
DOWNLOAD_URL="https://raw.githubusercontent.com/pojntfx/documatio/main/documatio"
# File which contains the current version
VERSION_FILE="${HOME}/.documatio_version"
# Endpoint which returns the latest commit hash for documatio
COMMIT_HASH_ENDPOINT="https://api.github.com/repos/pojntfx/documatio/commits/main"

# Shows documatio usage information.
print_help() {
    case "$1" in
    "-h" | "--help")
        :
        ;;
    *)
        printf "Unknown command or argument \"${arg}\".\n\n"
        ;;
    esac

    echo "In goes Markdown, out come indexed HTML and PDF slides and documents.

Utility Commands:
build                               Build the files in the \`docs\` directory into the \`out\` directory.
dev                                 Re-compile if a Markdown file in the \`docs\` directory changes.

Miscellaneous Commands:
upgrade                             Upgrade this tool.

For more information, please visit https://github.com/pojntfx/documatio#Usage."

    exit 0
}

# Handle the main commands
case $1 in
# Compile the markdown files
build)
    mkdir -p out/docs
    echo "<!DOCTYPE html><meta charset="utf-8"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"description\" content=\"$(sed -n '2 p' docs/metadata.txt)\"><link rel=\"stylesheet\" href=\"https://unpkg.com/marx-css/css/marx.min.css\"><title>$(sed -n '1 p' docs/metadata.txt)</title><main><h1>$(sed -n '1 p' docs/metadata.txt)</h1><p>$(sed -n '2 p' docs/metadata.txt)</p><hr><a href=\"$(sed -n '4 p' docs/metadata.txt)\" target=\"_blank\">üìÉ View source (‚úçÔ∏è $(sed -n '3 p' docs/metadata.txt))</a><br><a href=\"$(sed -n '5 p' docs/metadata.txt)\" download=\"$(sed -n '1 p' docs/metadata.txt).zip\">üì• Download all as ZIP</a><hr><div>You may do the following:</div><ul>" >"out/docs/index.html"
    for document in docs/*.md; do
        echo "Compiling ${document} ..."
        pandoc "${document}" -o "out/${document}.pdf" &
        pandoc "${document}" --toc --self-contained -t html5 -o "out/${document}.html" &
        pandoc "${document}" --self-contained -t slidy --slide-level 3 -o "out/${document}.slides.html" &
        pandoc "${document}" -t beamer --slide-level 3 -o "out/${document}.slides.pdf"
        echo "<li><a href=\"${document#docs/}.html\" target=\"_blank\">üåê View ${document#docs/} in your browser</a> (also available as <a href=\"${document#docs/}.slides.html\" target=\"_blank\">slides</a>) or <a href=\"${document#docs/}.pdf\" target=\"_blank\">üì• download ${document#docs/} as PDF</a> (also available as <a href=\"${document#docs/}.slides.pdf\" target=\"_blank\">slides</a>)" >>"out/docs/index.html"
    done
    echo "</ul><div><strong><em>$(sed -n '6 p' docs/metadata.txt)</em></strong></div></main>" >>"out/docs/index.html"
    mkdir -p "out/release"
    zip -j -r "out/release/all.zip" "out/docs"
    ;;

# Compile the markdown files if a file changed
dev)
    while [ -z "${DOCUMATIO_PID}" ] || [ -n "$(inotifywait -q -r -e modify docs/*.md)" ]; do
        $0 build &
        export DOCUMATIO_PID="$$!"
    done
    ;;

# Upgrade this tool.
upgrade)
    # Read the following lines into memory first so that replacing the script while it is running doesn't lead to issues
    {
        # Get the current version
        touch "${VERSION_FILE}"
        current_version="$(cat ${VERSION_FILE})"

        # Check the latest version by fetching the commit hash
        latest_version="$(curl -s -H 'Accept: application/vnd.github.VERSION.sha' ${COMMIT_HASH_ENDPOINT})"

        # Upgrade if the versions don't match
        if [ "${current_version}" != "${latest_version}" ]; then
            echo "Upgrading to version \"${latest_version}\" ..."

            # Fetch the latest version from GitHub
            sudo curl -L -o /usr/local/bin/documatio "${DOWNLOAD_URL}"

            # Make it executable
            sudo chmod +x /usr/local/bin/documatio

            # Add the new commit hash
            echo "${latest_version}" >"${VERSION_FILE}"

            # Exit to use the new script
            exit
        fi

        echo "No update available. You have version \"${current_version}\", the latest version is \"${latest_version}\"."

        exit
    }

    ;;

*)
    print_help $1
    ;;
esac
